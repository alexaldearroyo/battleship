{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://battleship/./js/ship.js","webpack://battleship/./js/gameboard.js","webpack://battleship/./js/player.js","webpack://battleship/./js/main.js","webpack://battleship/./js/gameLoop.js","webpack://battleship/./js/domInteraction.js"],"sourcesContent":["export default class Ship {\n    constructor(length, name) {\n        this.length = length;\n        this.name = name; // Agregar el nombre del barco\n        this.hits = 0;\n        this.sunk = false;\n        this.coordinates = null; // Agregar la propiedad coordinates\n    }\n\n    hit() {\n        this.hits++;\n        if (this.hits >= this.length) {\n            this.sunk = true;\n        }\n    }\n\n    isSunk() {\n        return this.sunk;\n    }\n}\n","export default class Gameboard {\n    constructor() {\n        this.board = Array(10)\n            .fill(null)\n            .map(() => Array(10).fill(null)); // Crear un tablero 10x10 inicialmente vacío\n        this.missedAttacks = [];\n        this.ships = []; // Inicializar la propiedad ships como un array vacío\n    }\n\n    placeShip(ship, x, y, isHorizontal) {\n        // Verificar que la posición sea válida\n        if (!this.isValidPosition(ship, x, y, isHorizontal)) {\n            throw new Error(\"Posición no válida para colocar el barco.\");\n        }\n    \n        // Colocar el barco en el tablero\n        for (let i = 0; i < ship.length; i++) {\n            if (isHorizontal) {\n                this.board[x + i][y] = ship;\n            } else {\n                this.board[x][y + i] = ship;\n            }\n        }\n    \n        // Agregar el barco a la lista de barcos del tablero\n        this.ships.push(ship);\n    }\n\n    isValidPosition(ship, x, y, isHorizontal) {\n        // Verificar que el barco no se salga del tablero\n        if (isHorizontal) {\n            if (x + ship.length > 10) return false; // Si es horizontal, verifica el eje X\n        } else {\n            if (y + ship.length > 10) return false; // Si es vertical, verifica el eje Y\n        }\n\n        // Verificar que el barco no se superponga con otros barcos\n        for (let i = 0; i < ship.length; i++) {\n            if (isHorizontal) {\n                if (this.board[x + i][y]) return false;\n            } else {\n                if (this.board[x][y + i]) return false;\n            }\n        }\n\n        return true;\n    }\n\n    receiveAttack(x, y) {\n        // Marcar la celda como atacada\n        if (this.board[x][y] === null) {\n            // Si no hay un barco en la celda, registra el ataque como un \"miss\"\n            this.missedAttacks.push({ x, y });\n        } else if (this.board[x][y] === \"hit\") {\n            // Si la celda ya ha sido atacada, no hagas nada (ataque repetido)\n            return;\n        } else {\n            // Si hay un barco en la celda, registra el ataque en el barco y marca la celda como atacada\n            const ship = this.board[x][y];\n            ship.hit(); // Esto marca una parte del barco como golpeada\n            this.board[x][y] = \"hit\"; // Marcar la celda como golpeada\n\n            // Verificar si el barco está completamente hundido\n            if (ship.isSunk()) {\n                // Puedes hacer algo aquí cuando un barco esté completamente hundido, si es necesario\n            }\n        }\n    }\n\n    allShipsSunk() {\n        // Verifica si todos los barcos están hundidos\n        return this.board.flat().every(cell => cell === null || cell === \"hit\");\n    }\n\n    isOccupied(x, y) {\n        return this.board[x][y] !== null;\n    }\n    \n}\n","export default class Player {\n    constructor(name) {\n        this.name = name;\n        this.previousAttacks = [];\n    }\n\n    attack(gameboard, x, y) {\n        if (!this.previousAttacks.some(coord => coord.x === x && coord.y === y)) {\n            gameboard.receiveAttack(x, y);\n            this.previousAttacks.push({ x, y });\n        }\n    }\n\n    randomAttack(gameboard) {\n        let x, y;\n        do {\n            x = Math.floor(Math.random() * 10);\n            y = Math.floor(Math.random() * 10);\n        } while (this.previousAttacks.some(coord => coord.x === x && coord.y === y));\n        this.attack(gameboard, x, y);\n    }\n\n    placeShips(gameboard, ships, humanGrid) {\n        let currentShipIndex = 0;\n        let isHorizontal = true; // Por defecto, la orientación es horizontal\n    \n        // Función para verificar si la posición es válida\n        function isValidPosition(ship, x, y, isHorizontal) {\n            // Verificar que el barco no se salga del tablero\n            if (isHorizontal) {\n                if (x + ship.length > 10) return false; // Si es horizontal, verifica el eje X\n            } else {\n                if (y + ship.length > 10) return false; // Si es vertical, verifica el eje Y\n            }\n        \n            // Verificar que el barco no se superponga con otros barcos\n            for (let i = 0; i < ship.length; i++) {\n                if (isHorizontal) {\n                    if (gameboard.isOccupied(x + i, y)) return false;\n                } else {\n                    if (gameboard.isOccupied(x, y + i)) return false;\n                }\n            }\n        \n            return true;\n        }\n        \n        // Puedes agregar un botón o interruptor para cambiar la orientación del barco\n        const orientationButton = document.getElementById(\"orientationButton\");\n        orientationButton.addEventListener(\"click\", function() {\n            isHorizontal = !isHorizontal; // Cambia la orientación\n        });\n        \n        // Event Listener para las celdas del tablero del jugador\n        humanGrid.addEventListener(\"click\", function(event) {\n            if (event.target.classList.contains(\"cell\") && currentShipIndex < ships.length) {\n                const x = parseInt(event.target.dataset.x);\n                const y = parseInt(event.target.dataset.y);\n    \n                if (isValidPosition(ships[currentShipIndex], x, y, isHorizontal)) {\n                    gameboard.placeShip(ships[currentShipIndex], x, y, isHorizontal);\n                    currentShipIndex++; // Mueve al siguiente barco\n    \n                    // Actualiza el tablero y la interfaz (si es necesario)\n                    updateBoardUI(gameboard);\n                } else {\n                    alert(\"Posición no válida. Intenta de nuevo.\");\n                }\n            }\n        });\n\n        function updateBoardUI(gameboard) {\n            // Aquí puedes agregar el código para actualizar el tablero visualmente\n            // Por ejemplo, puedes cambiar el color de las celdas donde se ha colocado un barco\n        }\n\n    }\n\n    placeShipsRandomly(gameboard, ships) {\n        ships.forEach(ship => {\n            let x, y, isHorizontal;\n            do {\n                x = Math.floor(Math.random() * 10);\n                y = Math.floor(Math.random() * 10);\n                isHorizontal = Math.random() < 0.5; // Decide aleatoriamente la orientación del barco\n            } while (!this._canPlace(ship, x, y, isHorizontal, gameboard));\n            gameboard.placeShip(ship, x, y, isHorizontal);\n        });\n    }\n\n    _canPlace(ship, x, y, isHorizontal, gameboard) {\n        // Verificar que el barco no se salga del tablero\n        if (isHorizontal) {\n            if (x + ship.length > 10) return false; // Si es horizontal, verifica el eje X\n        } else {\n            if (y + ship.length > 10) return false; // Si es vertical, verifica el eje Y\n        }\n\n        // Verificar que el barco no se superponga con otros barcos\n        for (let i = 0; i < ship.length; i++) {\n            if (isHorizontal) {\n                if (gameboard.isOccupied(x + i, y)) return false;\n            } else {\n                if (gameboard.isOccupied(x, y + i)) return false;\n            }\n        }\n\n        return true;\n    }\n}\n","import \"../sass/main.scss\";\nimport Ship from \"./ship.js\";\nimport Gameboard from \"./gameboard.js\";\nimport Player from \"./player.js\";\nimport startGame from './gameLoop.js'; // Importa el bucle principal del juego\n\nconst carrier = new Ship(5, \"carrier\");\nconst battleship = new Ship(4, \"battleship\");\nconst cruiser = new Ship(3, \"cruiser\");\nconst submarine = new Ship(3, \"submarine\");\nconst boat = new Ship(2, \"boat\");\n\nconst human = new Player(\"Human\");\nconst computer = new Player(\"Computer\");\n\nconst humanGameboard = new Gameboard();\nconst computerGameboard = new Gameboard();\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    const startGameButton = document.getElementById(\"startGameButton\");\n    startGameButton.addEventListener(\"click\", () => startGame(human, computer, humanGameboard, computerGameboard));\n});\n\n","import { renderBoard, placeShipsForHuman, placeShipsForComputer } from './domInteraction.js';\n\nfunction startGame(human, computer, humanGameboard, computerGameboard) {\n    // Poblamos los tableros con coordenadas predeterminadas (esto cambiará más adelante)\n    // Por ahora, solo para propósitos de prueba\n    // humanGameboard.placeShip(/*...*/);\n    // computerGameboard.placeShip(/*...*/);\n\n    // Renderiza los tableros\n    renderBoard(humanGameboard, computerGameboard);\n\n    // Coloca los barcos para el humano y la computadora\n    placeShipsForHuman(human, humanGameboard);\n    placeShipsForComputer(computer, computerGameboard);\n\n    // Muestra el contenedor del juego y oculta el botón \"Start Game\"\n    const gameContainer = document.getElementById(\"gameContainer\");\n    const startGameButton = document.getElementById(\"startGameButton\");\n    gameContainer.style.display = \"block\";\n    startGameButton.style.display = \"none\";\n}\n\nexport default startGame;\n","import Ship from './ship'; \n\nexport function renderBoard(humanGameboard, computerGameboard) {\n    const humanGrid = document.querySelector(\"#human-board .grid\");\n    const computerGrid = document.querySelector(\"#computer-board .grid\");\n    \n    // Asumiendo un tablero de 10x10\n    const size = 10;\n\n    // Limpiar cualquier contenido previo\n    humanGrid.innerHTML = '';\n    computerGrid.innerHTML = '';\n\n    // Crear celdas para el humano\n    for (let i = 0; i < size; i++) {\n        for (let j = 0; j < size; j++) {\n            const cell = document.createElement('div');\n            cell.classList.add('cell');\n            cell.dataset.x = i;\n            cell.dataset.y = j;\n            humanGrid.appendChild(cell);\n        }\n    }\n\n    // Crear celdas para la computadora\n    for (let i = 0; i < size; i++) {\n        for (let j = 0; j < size; j++) {\n            const cell = document.createElement('div');\n            cell.classList.add('cell');\n            cell.dataset.x = i;\n            cell.dataset.y = j;\n            computerGrid.appendChild(cell);\n        }\n    }\n}\n\n\nexport function placeShipsForHuman(player, gameboard) {\n    const humanGrid = document.querySelector(\"#human-board .grid\");\n    const ships = [\n        new Ship(5, \"carrier\"),\n        new Ship(4, \"battleship\"),\n        new Ship(3, \"cruiser\"),\n        new Ship(3, \"submarine\"),\n        new Ship(2, \"boat\")\n    ];\n    \n    let currentShipIndex = 0;\n\n    humanGrid.addEventListener(\"mouseover\", function(event) {\n        if (event.target.classList.contains(\"cell\")) {\n            const x = parseInt(event.target.dataset.x);\n            const y = parseInt(event.target.dataset.y);\n            const ship = ships[currentShipIndex];\n\n            // Elimina la clase cell-preview de todas las celdas\n            document.querySelectorAll(\".cell-preview\").forEach(cell => cell.classList.remove(\"cell-preview\"));\n\n            // Verifica si el barco puede ser colocado en la posición actual\n            if (gameboard.isValidPosition(ship, x, y)) {\n                for (let i = 0; i < ship.length; i++) {\n                    const cell = humanGrid.querySelector(`[data-x=\"${x + i}\"][data-y=\"${y}\"]`);\n                    if (cell) {\n                        cell.classList.add(\"cell-preview\");\n                    }\n                }\n            }\n        }\n    });\n\n    humanGrid.addEventListener(\"mouseout\", function(event) {\n        if (event.target.classList.contains(\"cell\")) {\n            // Elimina la clase cell-preview de todas las celdas cuando el ratón sale de una celda\n            document.querySelectorAll(\".cell-preview\").forEach(cell => cell.classList.remove(\"cell-preview\"));\n        }\n    });\n\n    humanGrid.addEventListener(\"click\", function(event) {\n        if (event.target.classList.contains(\"cell\")) {\n            const x = parseInt(event.target.dataset.x);\n            const y = parseInt(event.target.dataset.y);\n            const ship = ships[currentShipIndex];\n\n            try {\n                gameboard.placeShip(ship, x, y);\n                currentShipIndex++; // Mueve al siguiente barco\n                // Actualizar el tablero visualmente para mostrar el barco colocado\n            } catch (error) {\n                alert(error.message); // Muestra un mensaje si la posición no es válida\n            }\n\n            if (currentShipIndex >= ships.length) {\n                // Todos los barcos han sido colocados\n                // Aquí puedes agregar lógica adicional si es necesario, como iniciar el juego\n            }\n        }\n    });\n}\n\n\nexport function placeShipsForComputer(player, gameboard) {\n    const ships = [/* lista de barcos */];\n\n    ships.forEach(ship => {\n        let x, y, isHorizontal;\n        do {\n            x = Math.floor(Math.random() * 10);\n            y = Math.floor(Math.random() * 10);\n            isHorizontal = Math.random() < 0.5;\n        } while (!gameboard.isValidPosition(ship, x, y, isHorizontal));\n        gameboard.placeShip(ship, x, y, isHorizontal);\n    });\n}\n\n"],"names":["Ship","length","name","_classCallCheck","this","hits","sunk","coordinates","key","value","Gameboard","board","Array","fill","map","missedAttacks","ships","ship","x","y","isHorizontal","isValidPosition","Error","i","push","hit","isSunk","flat","every","cell","Player","previousAttacks","gameboard","some","coord","receiveAttack","Math","floor","random","attack","humanGrid","currentShipIndex","document","getElementById","addEventListener","event","target","classList","contains","parseInt","dataset","isOccupied","alert","placeShip","_this","forEach","_canPlace","humanGameboard","computerGameboard","human","computer","querySelector","computerGrid","innerHTML","j","createElement","add","appendChild","renderBoard","querySelectorAll","remove","concat","error","message","player","placeShipsForComputer","gameContainer","startGameButton","style","display","startGame"],"sourceRoot":""}