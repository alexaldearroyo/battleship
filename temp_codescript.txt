src/index.ts:

import "./styles/main.css";
import { playerBoard, computerBoard, Board } from "./scripts/boards";
import {
  manualPlacement,
  playerPlacement,
  computerPlacement,
  shipsPlaced,
  totalShips,
} from "./scripts/place";
import { Game } from "./scripts/game";

const startButton = document.querySelector(".startButton") as HTMLElement;
const title = document.querySelector(".title") as HTMLElement;
const mainPage = document.querySelector(".mainPage") as HTMLElement;
const playerBoardContainer = document.createElement("div");
const computerBoardContainer = document.createElement("div");

startButton.addEventListener("click", startGame);

function updateBoardView(board: Board, container: HTMLElement) {
  container.innerHTML = "";
  generateGrid(board, container);
}

export let gameInstance = { instance: null as Game | null };

function generateGrid(board: Board, container: HTMLElement) {
  const boardSize = board.length;

  const cellContainer = document.createElement("div");
  cellContainer.classList.add("board-container");

  for (let x = 0; x < boardSize; x++) {
    for (let y = 0; y < boardSize; y++) {
      const cell = document.createElement("div");
      cell.classList.add("cell");
      cell.dataset.x = x.toString(); // Asegurando que dataset.x esté definido
      cell.dataset.y = y.toString(); // Asegurando que dataset.y esté definido

      switch (board[x][y].state) {
        case "empty":
          cell.classList.add("empty");
          cell.textContent = `${x},${y}`; // Muestra las coordenadas en las celdas vacías
          break;
        case "ship":
          cell.classList.add("ship");
          break;
        case "miss":
          cell.classList.add("miss");
          // cell.textContent = "X";
          break;
        case "hit":
          cell.classList.add("hit");
          break;
        default:
          break;
      }

      // Agrega un evento de clic a todas las celdas del tablero del ordenador, no solo a las celdas "ship"
      if (container.classList.contains("computerBoardContainer")) {
        cell.addEventListener("click", function () {
          const xStr = cell.dataset.x;
          const yStr = cell.dataset.y;

          // Asegurarse de que xStr y yStr no sean undefined antes de convertirlos en números
          if (xStr !== undefined && yStr !== undefined) {
            const x = parseInt(xStr);
            const y = parseInt(yStr);
            if (gameInstance.instance) {
              gameInstance.instance.playerTurn(x, y);
              gameInstance.instance.computerTurn();
              updateBoardView(computerBoard, computerBoardContainer);
              updateBoardView(playerBoard, playerBoardContainer);
            }
          }
        });
      }

      // Si es el tablero del jugador, colorea las celdas de los barcos
      if (container.classList.contains("playerBoardContainer") && board[x][y].state === "ship") {
        cell.classList.add("blue");
      }

      cellContainer.appendChild(cell);
    }
  }

  container.appendChild(cellContainer);
}


function startGame() {
  if (startButton) startButton.remove();

  // Título
  const titleSpace = document.createElement("div");
  titleSpace.classList.add("titleSpace");

  title.classList.add("smallTitle");
  titleSpace.appendChild(title);

  mainPage.insertBefore(titleSpace, mainPage.firstChild);

  // Espacio para los tableros
  const boardsSpace = document.createElement("div");
  boardsSpace.classList.add("boardsSpace");

  // Contenedor del tablero del jugador
  playerBoardContainer.classList.add("playerBoardContainer");
  const playerLabel = document.createElement("span");
  playerLabel.classList.add("playerLabel");
  playerLabel.textContent = "Player";
  playerBoardContainer.appendChild(playerLabel);

  // Contenedor del tablero de la computadora
  computerBoardContainer.classList.add("computerBoardContainer");
  const computerLabel = document.createElement("span");
  computerLabel.classList.add("computerLabel");
  computerLabel.textContent = "Computer";
  computerBoardContainer.appendChild(computerLabel);

  // Contenedor debajo del tablero del jugador
  const playerBoardBelow = document.createElement("div");
  playerBoardBelow.classList.add("playerBoardBelow");

  // Contenedor debajo del tablero de la computadora
  const computerBoardBelow = document.createElement("div");
  computerBoardBelow.classList.add("computerBoardBelow");

  const changeDirButton = document.createElement("button");
  changeDirButton.classList.add("fa", "fa-refresh");
  changeDirButton.classList.add("changeDirButton");
  playerBoardBelow.appendChild(changeDirButton);

  // Añadir elementos al DOM
  mainPage.appendChild(boardsSpace);
  boardsSpace.appendChild(playerBoardContainer);
  boardsSpace.appendChild(playerBoardBelow);
  boardsSpace.appendChild(computerBoardContainer);
  boardsSpace.appendChild(computerBoardBelow);

  // Colocación de los barcos y generación de la cuadrícula
  computerPlacement();
  manualPlacement(
    playerBoardContainer,
    playerBoardBelow,
    changeDirButton,
    () => {
      if (gameInstance.instance) {
        gameInstance.instance.playerTurn();
      }
    }
  );

  generateGrid(playerBoard, playerBoardContainer);
  generateGrid(computerBoard, computerBoardContainer);
}

----------------------------------------

src/styles/main.css:

@import "~font-awesome/css/font-awesome.min.css";

body {
    font-family: 'Arial', sans-serif;
    height: 100vh;
    max-height: 100vh; /* Asegura que body no exceda la altura de la ventana */
    width: 100vw;
    max-width: 100vw; /* Asegura que body no exceda el ancho de la ventana */
    background-color: #f5f5f5;
    margin: 0;
    overflow: hidden; /* Esconde cualquier desbordamiento */
}

.mainPage {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    padding: 200px;
    background-color: #fff;
    height: 100vh;
    max-height: 100vh; /* Asegura que mainPage no exceda la altura de la ventana */
    width: 100vw;
    max-width: 100vw; /* Asegura que mainPage no exceda el ancho de la ventana */
    box-sizing: border-box; /* Incluye el padding y el borde en el ancho/alto total */
}

.title {
    font-size: 64px;
    margin-bottom: 40px;
}

.smallTitle {
    font-size: 32px; /* Reduce el tamaño de la fuente */
    margin: 0;
}

.startButton {
    padding: 20px 40px;
    border: none;
    border-radius: 15px;
    cursor: pointer;
    background-color: #007BFF;
    transition: background-color 0.3s ease;
    font-size: 18px;
    color: white;
}

.startButton:hover {
    background-color: #0056b3;
}

.titleSpace {
    flex-grow: 0;
    display: flex;
    justify-content: center;
    align-items: flex-start;
    padding: 0;
    /* margin-top: 0; */
    margin-bottom: 50px;
}

.boardsSpace {
    /* flex-grow: 1; */
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0;
    gap: 2%;
}

.playerLabel, .computerLabel {
    font-size: 22px;
    padding: 12px;
    background-color: #f5f5f5;
    border: 0.5px solid #333;
    color: #333;
    display: flex;
    justify-content: center;
    align-items: center;
}


.playerBoardContainer, .computerBoardContainer {
    min-width: 400px; /* No será más pequeño que 400px. */
    aspect-ratio: 1;
    /* background-color: #e1e1e1; */
    margin: 0 2.5vw;
    position: relative; /* Establece posición relativa para que los elementos de etiqueta sean relativos a este contenedor */
    margin-top: 40px; /* Aumenta el espacio entre el título y el tablero */
    

}

/* Estilos para contenedor de tablero */
.board-container {
    display: grid; /* Utiliza un sistema de cuadrícula para organizar las celdas */
    grid-template-columns: repeat(10, 40px); /* Cambia el tamaño de las columnas a 40px */
    grid-template-rows: repeat(10, 40px); /* Cambia el tamaño de las filas a 40px */
    margin: 0 auto; /* Centra el tablero horizontalmente en su contenedor */
}

/* Estilos de las celdas */
.cell {
    aspect-ratio: 1;
    background-color: white; /* Fondo blanco para celdas vacías */
    border: 0.5px solid #000; /* Línea negra para bordes de celdas */
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 18px;
    font-weight: bold;
    color: transparent; /* Hace que el contenido de la celda sea transparente */
}

.cell.blue {
    background-color: blue;
}

.cell.green {
    background-color: green !important;
    cursor: pointer;
}

.cell.red {
    background-color: red !important;
    cursor: default;
}

.cell.hit {
    background-color: red !important;
}

.cell.miss {
    background-color: grey !important;
    color: black; /* Esto hará que el texto "X" sea negro */
}


.playerBoardBelow, .computerBoardBelow {
    height: 125px; /* O cualquier altura que consideres apropiada */
    display: flex;
    justify-content: center;
    align-items: center;
}

.changeDirButton {
    padding: 10px 20px;
    font-size: 24px;
    background-color: #007BFF;
    color: white;
    border-radius: 10px;
    font-weight: 600;  /* Puedes considerar agregar una fuente Google si lo prefieres */
}

.changeDirButton:hover {
    background-color: #0056b3;
}

.changeDirButton:active {
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
    transform: scale(0.98);  /* Hace que el botón se reduzca ligeramente cuando se presiona */
}



/* Estilos para cuando la ventana tenga una estrechura menor a 500px */
@media (max-width: 500px) {
    .boardsSpace {
        flex-direction: column;
    }

    .computerBoardContainer, .playerBoardContainer {
        width: 80%; /* O el ancho que desees para esta estrechura */
        margin: 10px auto; /* Centra los tableros y añade un pequeño margen entre ellos */
    }
}




----------------------------------------

src/scripts/boards.ts:

import { Ship } from './ships';

interface Cell {
    x: number;
    y: number;
    state: 'empty' | 'ship' | 'hit' | 'miss';
    ship?: Ship;
}


type Board = Cell[][];

export function createEmptyBoard(size: number): Board {
    const board: Board = [];
    for (let x = 0; x < size; x++) {
        const row: Cell[] = [];
        for (let y = 0; y < size; y++) {
            row.push({
                x,
                y,
                state: "empty"
            });
        }
        board.push(row);
    }
    return board;
}

const playerBoard: Board = createEmptyBoard(10);
const computerBoard: Board = createEmptyBoard(10);

export { playerBoard, computerBoard, Board, Cell };

----------------------------------------

src/scripts/game.ts:

import { Ship } from "./ships";
import { Cell } from "./boards";

class Game {
  playerBoard: Cell[][];
  computerBoard: Cell[][];
  currentTurn: "playerTurn" | "computerTurn";
  playerBoatsSunk: number = 0;
  computerBoatsSunk: number = 0;

  constructor(playerBoard: Cell[][], computerBoard: Cell[][]) {
    this.playerBoard = playerBoard;
    this.computerBoard = computerBoard;
    this.currentTurn = "playerTurn";
  }

  playerTurn(row: number = 0, col: number = 0) {
    const cell = this.computerBoard[row][col];
    console.log(
      `playerTurn - Row: ${row}, Col: ${col}, Estado inicial de la celda: ${cell.state}`
    );
    if (cell.state === "empty") {
      cell.state = "miss";
      this.currentTurn = "computerTurn";
    } else if (cell.state === "ship") {
      cell.state = "hit";
      console.log(
        `Antes de addHit - Hits: ${cell.ship?.hits}, Estado del barco: ${cell.ship?.state}`
      );
      cell.ship?.addHit();
      console.log(
        `Después de addHit - Hits: ${cell.ship?.hits}, Estado del barco: ${cell.ship?.state}`
      );
      if (cell.ship?.state === "sunk") {
        this.computerBoatsSunk++;
        this.checkWinner();
      }
      this.currentTurn = "computerTurn";
    }
    console.log(`Estado final de la celda: ${cell.state}`);
  }

  computerTurn(row?: number, col?: number) {
    let cell: Cell;

    if (row !== undefined && col !== undefined) {
        // Si las coordenadas son proporcionadas, úsalas
        cell = this.playerBoard[row][col];
    } else {
        // De lo contrario, elige aleatoriamente
        let attempts = 0;
        const maxAttempts = 1000;
        
        do {
            if (attempts++ > maxAttempts) {
                console.log("Lanzando error después de demasiados intentos");
                throw new Error("Too many attempts to find a cell");
            }
    
            row = Math.floor(Math.random() * 10);
            col = Math.floor(Math.random() * 10);
            cell = this.playerBoard[row][col];
        } while (cell.state === "hit" || cell.state === "miss");
    }

    console.log(`Estado inicial de la celda: ${cell.state}`);

    if (cell.state === "empty") {
      cell.state = "miss";
      this.currentTurn = "playerTurn";
    } else if (cell.state === "ship") {
      cell.state = "hit";
      console.log(
        `Antes de addHit - Hits: ${cell.ship?.hits}, Estado del barco: ${cell.ship?.state}`
      );
      cell.ship?.addHit();
      console.log(`Estado final de la celda: ${cell.state}`);
      console.log(
        `Después de addHit - Hits: ${cell.ship?.hits}, Estado del barco: ${cell.ship?.state}`
      );
      if (cell.ship?.state === "sunk") {
        this.playerBoatsSunk++;
        this.checkWinner();
      }
      this.currentTurn = "playerTurn";
    }
    console.log(`Estado final de la celda: ${cell.state}`);
  }

  checkWinner() {
    if (this.playerBoatsSunk === 5) {
      console.log("Computer Wins!");
      // Puedes agregar aquí cualquier otra lógica que necesites cuando el computador gane.
    } else if (this.computerBoatsSunk === 5) {
      console.log("Player Wins!");
      // Puedes agregar aquí cualquier otra lógica que necesites cuando el jugador gane.
    }
  }
}

export { Game };



----------------------------------------

src/scripts/place.ts:

import { playerBoard, computerBoard, Board, Cell } from "./boards";

import {
  Ship,
  Axis,
  CarrierPlayer,
  BattleshipPlayer,
  DestructorPlayer,
  SubmarinePlayer,
  PatrolPlayer,
  CarrierComputer,
  BattleshipComputer,
  DestructorComputer,
  SubmarineComputer,
  PatrolComputer,
} from "./ships";

import { Game } from "./game";
import { gameInstance } from "../index";

let shipsToPlace = [
  CarrierPlayer,
  BattleshipPlayer,
  DestructorPlayer,
  SubmarinePlayer,
  PatrolPlayer,
];

let shipsPlaced = 0;
const totalShips = 5;
let currentShipIndex = 0;
let defaultOrientation: "horizontal" | "vertical" = "horizontal";
let boundPreviewShipPlacement: ((event?: MouseEvent) => void) | null = null;
let boundPlaceCurrentShip: ((event: MouseEvent) => void) | null = null;



function canPlaceShip(
  board: Cell[][],
  x: number,
  y: number,
  shipLength: number,
  horizontal: boolean
): boolean {
  const directions = [
    [-1, 0],
    [1, 0],
    [0, -1],
    [0, 1], // N, S, W, E
    [-1, -1],
    [-1, 1],
    [1, -1],
    [1, 1], // NW, NE, SW, SE
  ];

  for (let i = 0; i < shipLength; i++) {
    const currentX = horizontal ? x : x + i;
    const currentY = horizontal ? y + i : y;

    if (currentX < 0 || currentY < 0 || currentX >= 10 || currentY >= 10) {
      return false; // out of board
    }

    if (board[currentX][currentY].state === "ship") {
      return false; // cell already occupied
    }

    for (const [dx, dy] of directions) {
      const newX = currentX + dx;
      const newY = currentY + dy;
      if (
        newX >= 0 &&
        newY >= 0 &&
        newX < 10 &&
        newY < 10 &&
        board[newX][newY].state === "ship"
      ) {
        return false; // adjacent ship found
      }
    }
  }

  if (shipLength > 1) {
    for (const [dx, dy] of directions) {
      const adjacentX = x + dx;
      const adjacentY = y + dy;
      if (
        adjacentX >= 0 &&
        adjacentY >= 0 &&
        adjacentX < 10 &&
        adjacentY < 10 &&
        board[adjacentX][adjacentY].state === "ship"
      ) {
        return false;
      }
    }
  }

  return true;
}

function placeShip(
  board: Cell[][],
  ship: Ship,
  x: number,
  y: number,
  vertical: boolean
): void {
  for (let i = 0; i < ship.length; i++) {
    const currentX = vertical ? x : x + i;
    const currentY = vertical ? y + i : y;
    board[currentX][currentY] = {
      x: currentX,
      y: currentY,
      state: "ship",
      ship: ship,
    };
  }
}


function previewShipPlacement(
  playerBoardContainer: HTMLElement,
  event?: MouseEvent
) {
  if (!event) return; // Salir temprano si no se proporciona evento

  const lastShip = playerBoardContainer.querySelector(".green");
  if (lastShip) {
    lastShip.classList.remove("green");
  }

  if (currentShipIndex >= shipsToPlace.length) {
    return;
  }

  const cell = event.target as HTMLElement;
  if (!cell || !cell.dataset || !cell.dataset.x || !cell.dataset.y) {
    return;
  }
  let x: number;
  let y: number;

  const allCells = playerBoardContainer.querySelectorAll(".cell");
  allCells.forEach((cell) => {
    cell.classList.remove("green", "red");
  });

  if (cell.dataset.x && cell.dataset.y) {
    x = parseInt(cell.dataset.x, 10);
    y = parseInt(cell.dataset.y, 10);

    const ship = shipsToPlace[currentShipIndex];
    const canPlace = canPlaceShip(
      playerBoard,
      x,
      y,
      ship.length,
      defaultOrientation === "horizontal"
    );

    for (let i = 0; i < ship.length; i++) {
      const currentX = defaultOrientation === "horizontal" ? x : x + i;
      const currentY = defaultOrientation === "horizontal" ? y + i : y;
      const previewCell = document.querySelector(
        `.cell[data-x="${currentX}"][data-y="${currentY}"]`
      );
      if (previewCell) {
        previewCell.classList.toggle("green", canPlace);
        previewCell.classList.toggle("red", !canPlace);
      }
    }
  }
}

function placeCurrentShip(
  playerBoardContainer: HTMLElement,
  event: MouseEvent, // Añade este argumento
  onPlacementComplete: () => void // Añade este argumento
) {

  const cell = event.target as HTMLElement;
  if (
    cell.dataset.x &&
    cell.dataset.y &&
    currentShipIndex < shipsToPlace.length
  ) {
    const x = parseInt(cell.dataset.x, 10);
    const y = parseInt(cell.dataset.y, 10);

    const ship = shipsToPlace[currentShipIndex];
    const horizontal = defaultOrientation === "horizontal";

    if (canPlaceShip(playerBoard, x, y, ship.length, horizontal)) {
      placeShip(playerBoard, ship, x, y, horizontal);

      for (let i = 0; i < ship.length; i++) {
        const currentX = horizontal ? x : x + i;
        const currentY = horizontal ? y + i : y;
        const shipCell = document.querySelector(
          `.cell[data-x="${currentX}"][data-y="${currentY}"]`
        ) as HTMLElement;
        if (shipCell) {
          shipCell.style.backgroundColor = "blue";
          shipCell.classList.remove("green", "red");
        }
      }

      currentShipIndex++;
      shipsPlaced++; 

      if (currentShipIndex === shipsToPlace.length) {
        if (boundPreviewShipPlacement) {
          playerBoardContainer.removeEventListener("mouseover", boundPreviewShipPlacement);
        }
        if (boundPlaceCurrentShip) {
          playerBoardContainer.removeEventListener("click", boundPlaceCurrentShip);
        }
    

        boundPreviewShipPlacement = null;
        boundPlaceCurrentShip = null;
    

        const changeDirButton = document.querySelector(
          ".changeDirButton"
        ) as HTMLElement;
        if (changeDirButton) {
          changeDirButton.style.display = "none";
        }

        onPlacementComplete();

        gameInstance.instance = new Game(playerBoard, computerBoard);
        if (gameInstance.instance) {
          gameInstance.instance.playerTurn(x, y);
      }
      }
    }
  }
}

export function manualPlacement(
  playerBoardContainer: HTMLElement,
  playerBoardBelow: HTMLElement,
  changeDirButton: HTMLButtonElement,
  onPlacementComplete: () => void
) {
  if (!boundPreviewShipPlacement) {
    boundPreviewShipPlacement = previewShipPlacement.bind(null, playerBoardContainer);
  }

  if (!boundPlaceCurrentShip) {
    boundPlaceCurrentShip = (event: MouseEvent) => {
      placeCurrentShip(playerBoardContainer, event, onPlacementComplete);
    };
  }

  playerBoardContainer.addEventListener("mouseover", boundPreviewShipPlacement);
  playerBoardContainer.addEventListener("click", boundPlaceCurrentShip);

  changeDirButton.addEventListener("click", () => {
      console.log("Botón presionado");

      if (defaultOrientation === "horizontal") {
        defaultOrientation = "vertical";
      } else {
        defaultOrientation = "horizontal";
      }

      const mockEvent = new MouseEvent("mouseover");
      previewShipPlacement(playerBoardContainer, mockEvent);
    });
  }



function randomPlacement(board: Board, ship: Ship): void {
  let x: number, y: number;
  let tries = 0;
  const maxTries = 1000;
  let placed = false;

  let possiblePositions: { x: number; y: number; vertical: boolean }[] = [];
  for (let i = 0; i < board.length; i++) {
    for (let j = 0; j < board[i].length; j++) {
      possiblePositions.push({ x: i, y: j, vertical: true });
      possiblePositions.push({ x: i, y: j, vertical: false });
    }
  }

  possiblePositions = possiblePositions.sort(() => Math.random() - 0.5);

  for (const position of possiblePositions) {
    x = position.x;
    y = position.y;
    ship.axis = position.vertical ? "vertical" : "horizontal";
    if (canPlaceShip(board, x, y, ship.length, ship.axis === "vertical")) {
      placeShip(board, ship, x, y, ship.axis === "vertical");
      placed = true;
      break;
    }
    tries++;
    if (tries >= maxTries) {
      break;
    }
  }

  if (!placed) {
    throw new Error("Unable to place ship after many attempts");
  }
}

function playerPlacement(attempts: number = 0): void {
  if (attempts >= 10) {
    throw new Error("Unable to place all player ships after 10 attempts.");
  }

  const ships = [
    CarrierPlayer,
    BattleshipPlayer,
    DestructorPlayer,
    SubmarinePlayer,
    PatrolPlayer,
  ];
  ships.sort((a, b) => b.length - a.length);

  try {
    for (const ship of ships) {
      randomPlacement(playerBoard, ship);
    }
  } catch (error) {
    resetBoard(playerBoard);
    playerPlacement(attempts + 1);
  }
}

function computerPlacement(attempts: number = 0): void {
  if (attempts >= 10) {
    throw new Error("Unable to place all computer ships after 10 attempts.");
  }

  try {
    randomPlacement(computerBoard, CarrierComputer);
    randomPlacement(computerBoard, BattleshipComputer);
    randomPlacement(computerBoard, DestructorComputer);
    randomPlacement(computerBoard, SubmarineComputer);
    randomPlacement(computerBoard, PatrolComputer);
  } catch (error) {
    resetBoard(computerBoard);
    computerPlacement(attempts + 1);
  }
}

function resetBoard(board: Cell[][]): void {
  for (let x = 0; x < 10; x++) {
    for (let y = 0; y < 10; y++) {
      board[x][y].state = "empty";
    }
  }
}

export { playerPlacement, computerPlacement, shipsPlaced, totalShips };

----------------------------------------

src/scripts/ships.ts:

export type Axis = 'horizontal' | 'vertical';
export type Owner = 'playerShip' | 'computerShip';

class Ship {
    length: number;
    axis: Axis;
    owner: Owner;
    hits: number;
    state: "floating" | "sunk";

    constructor(length: number, axis: Axis, owner: Owner) {
        this.length = length;
        this.axis = axis;
        this.owner = owner;
        this.hits = 0;
        this.state = "floating";
    }

    addHit(): void {
        if (this.state === "sunk") {
            console.log("El barco ya está hundido, no se incrementa hits");
            return;
        }
        
        console.log(`Estado inicial del barco: ${this.state}`);
        this.hits += 1;
        console.log(`Hits actual: ${this.hits}, Longitud del barco: ${this.length}`);
        
        if (this.hits === this.length) {
            console.log("Barco hundido");
            this.state = "sunk";
        }
        console.log(`Estado final del barco: ${this.state}`);

    }
    
}

// Crear 5 instancias básicas de Ship
const CarrierPlayer = new Ship(5, 'horizontal', 'playerShip');
const BattleshipPlayer = new Ship(4, 'horizontal', 'playerShip');
const DestructorPlayer = new Ship(3, 'horizontal', 'playerShip');
const SubmarinePlayer = new Ship(3, 'horizontal', 'playerShip');
const PatrolPlayer = new Ship(2, 'horizontal', 'playerShip');

const CarrierComputer = new Ship(5, 'horizontal', 'computerShip');
const BattleshipComputer = new Ship(4, 'horizontal', 'computerShip');
const DestructorComputer = new Ship(3, 'horizontal', 'computerShip');
const SubmarineComputer = new Ship(3, 'horizontal', 'computerShip');
const PatrolComputer = new Ship(2, 'horizontal', 'computerShip');

export {
    Ship,
    CarrierPlayer,
    BattleshipPlayer,
    DestructorPlayer,
    SubmarinePlayer,
    PatrolPlayer,
    CarrierComputer,
    BattleshipComputer,
    DestructorComputer,
    SubmarineComputer,
    PatrolComputer
};

/// TEST

----------------------------------------

